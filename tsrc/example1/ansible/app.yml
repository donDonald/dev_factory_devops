---

#   Plan {
#       Install app itself {
#           Install app using simple docker
#           1. Create local docker registry, setup /etc/hosts to point regitry to localhost
#               $ mkdir -p ~/tmp && cd ~/tmp
#               $ git clone git@github.com:donDonald/dev-factory-dregistry.git dregistry
#               $ cd dregistry
#               $ docker-compose up -d --build
#               $ docker-compose ps
#                         Name                        Command               State            Ports         
#               -------------------------------------------------------------------------------------------
#               dregistry_dregistry-ui_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:11132->80/tcp  
#               dregistry_dregistry_1      /entrypoint.sh /etc/docker ...   Up      0.0.0.0:11131->5000/tcp

#               $ ping dregistry
#               PING dregistry (172.18.0.3) 56(84) bytes of data.
#               64 bytes from dregistry (172.18.0.3): icmp_seq=1 ttl=64 time=0.080 ms
#               64 bytes from dregistry (172.18.0.3): icmp_seq=2 ttl=64 time=0.075 ms

#               ping dregistry-ui
#               PING dregistry-ui (172.18.0.2) 56(84) bytes of data.
#               64 bytes from dregistry-ui (172.18.0.2): icmp_seq=1 ttl=64 time=0.138 ms
#               64 bytes from dregistry-ui (172.18.0.2): icmp_seq=2 ttl=64 time=0.061 ms


#           1.1 Check registry works
#               $ curl http://dregistry:5000/v2/_catalog
#               {"repositories":[]}

#           1.2 Check registry-ui works
#               Navigate to http://localhost:11132/


#           2. Build app docker image
#               $ cd ~/src/donDonald/devops/tsrc/example1/app
#               $ ./docker.build.sh app
#               Successfully built a815d5dc5219
#               Successfully tagged app:latest
#               ptaranov@ptswt3:~/src/donDonald/

#           3. Push app image into regitry
#               $ docker tag app dregistry:5000/app:latest
#               $ docker push dregistry:5000/app:latest
#               $ curl http://dregistry:5000/v2/_catalog
#               {"repositories":["app"]}
#               $ curl http://dregistry:5000/v2/app/tags/list
#               {"name":"app","tags":["latest"]}


#           4. Create docker-compose.yml for app

#           5. Create docker_service role {
#               takes paramss:
#                   - git repo, version, tag?
#                   - filename for dcoker-compose file to run

#               this role shall install the given docker-compose file
#           }

#           6. Move app to swarm mode 

#       }

#       Install Grafana dashboard {
#           Deploy devops/tsrc/example1/app/app.grafana.dashboard.json to DOCKPROM
#       }

#       Update phrometeus setup {
#           Have to update phrometeus scrapes configs and point app as a spurce of scrapes
#       }
#   }

- name: Setup swarm manager
  hosts: APP
  vars:
    advertise_address: "eth1:2377"
  roles:
    - docker_v2
    - docker_swarm_manager



- name: Setup swarm workers
  hosts: APP_WORKERS
  vars:
    manager_group: 'APP'
    advertise_address: "eth1:2377"
  roles:
    - docker_swarm_worker



- name: Deploy app
  hosts: APP
  vars:
    name: 'app'
    git_repo: 'https://github.com/donDonald/devops.git'
    version: 'app-server'
    path: 'tsrc/example1/'
  roles:
    - docker_stack



- name: Deploy grafana dashboard
  hosts: DOCKPROM
  vars:
    url: 'https://raw.githubusercontent.com/donDonald/devops/app-server/tsrc/example1/app/app.grafana.dashboard.json'
    dest: 'd_service/grafana/provisioning/dashboards/app.grafana.dashboard.json'
  roles:
    - dockprom_service_grafana_dashboard



- name: Deploy prometheus scrape configuration
  hosts: APP
  vars:
    prometheus_target: 'h1'
  roles:
    - dockprom_service_prometheus_scrape_target

